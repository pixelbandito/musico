{"version":3,"sources":["Key/Key.js","Key/index.js","KeyBoard/KeyBoard.js","KeyBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["notes","c","d","e","Key","state","playing","context","window","AudioContext","webkitAudioContext","handleClick","_this$state","_this","gainNode","gain","exponentialRampToValueAtTime","currentTime","setState","prevState","note","this","props","createGain","oscillator","createOscillator","type","frequency","value","start","setValueAtTime","connect","destination","react_default","a","createElement","onClick","Component","StrikeableHoldable","handleHoldComplete","event","console","log","handleHoldProgress","Fragment","lib","config","defineHold","updateEvery","holdFor","onHoldComplete","onHoldProgress","children","style","height","width","background","userSelect","margin","holdProgress","StrikeableDraggable","dragging","initialClientX","initialClientY","clientX","clientY","handleDrag","_this2","handleDragStart","handleDragEnd","handleDragEnter","handleDragLeave","onDragEnter","onDragLeave","draggable","onDrag","onDragStart","onDragEnd","KeyBoard","KeyBoard_StrikeableDraggable","KeyBoard_StrikeableHoldable","App","className","src_KeyBoard","src_Key","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a209cdc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst notes = {\n  c: 261.6,\n  d: 293.7,\n  e: 329.6,\n}\n\nclass Key extends Component {\n  state = {\n    playing: false,\n    context: (window.AudioContext && new window.AudioContext()) || (window.webkitAudioContext && new window.webkitAudioContext()) || null,\n  }\n\n  componentDidMount() {\n    const { note } = this.props;\n    const { context } = this.state;\n    this.gainNode = context.createGain()\n    this.oscillator = context.createOscillator()\n    this.oscillator.type = 'sine';\n    this.oscillator.frequency.value = notes[note];\n    this.oscillator.start(0);\n    this.gainNode.gain.setValueAtTime(0.0001, context.currentTime);\n    this.oscillator.connect(this.gainNode);\n    this.gainNode.connect(context.destination);\n  }\n\n  handleClick = () => {\n    const { context, playing } = this.state;\n\n    if (playing) {\n      this.gainNode.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + 0.4);\n    } else {\n      this.gainNode.gain.exponentialRampToValueAtTime(1, context.currentTime + 0.1);\n    }\n    this.setState(prevState => ({ playing: !prevState.playing }))\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n\nexport default Key;\n","import './Key.css';\nimport Key from './Key.js';\n\nexport default Key;\n","import React, { Component } from 'react';\nimport { Holdable, defineHold } from 'react-touch';\n\nclass StrikeableHoldable extends Component {\n  handleHoldComplete = (event) => {\n    console.log('handleHoldComplete', { event });\n  }\n\n  handleHoldProgress = (event) => {\n    console.log('handleHoldProgress', { event });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Holdable\n          config={defineHold({updateEvery: 10, holdFor: 10000})}\n          onHoldComplete={this.handleHoldComplete}\n          onHoldProgress={this.handleHoldProgress}\n          children={(event) => (\n            <div style={{\n                height: '100px',\n                width: '100px',\n                background: 'pink',\n                userSelect: 'none',\n                margin: '20px',\n              }}\n            >\n              {event.holdProgress}\n              {typeof window.webkitAudioContext}\n            </div>\n          )}\n        />\n        <Holdable\n          config={defineHold({updateEvery: 10, holdFor: 10000})}\n          onHoldComplete={this.handleHoldComplete}\n          onHoldProgress={this.handleHoldProgress}\n          children={(event) => (\n            <div style={{\n                height: '100px',\n                width: '100px',\n                background: 'pink',\n                userSelect: 'none',\n                margin: '20px',\n              }}\n            >\n              {event.holdProgress}\n              {typeof window.webkitAudioContext}\n            </div>\n          )}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nclass StrikeableDraggable extends Component {\n  state = {\n    dragging: false,\n    initialClientX: null,\n    initialClientY: null,\n    clientX: null,\n    clientY: null,\n  }\n\n  handleDrag = (event) => {\n    console.log('handleDrag', { event });\n    this.setState({\n      clientX: event.clientX,\n      clientY: event.clientY,\n    });\n  }\n\n  handleDragStart = (event) => {\n    console.log('handleDragStart', { event });\n    this.setState({\n      dragging: true,\n      initialClientX: event.clientX,\n      initialClientY: event.clientY,\n    });\n  }\n\n  handleDragEnd = (event) => {\n    console.log('handleDragEnd', { event });\n    this.setState({ dragging: false });\n  }\n\n  handleDragEnter = (event) => {\n    console.log('handleDragEnter', { event });\n  }\n\n  handleDragLeave = (event) => {\n    console.log('handleDragLeave', { event });\n    this.setState({ dragging: false });\n  }\n\n  render() {\n    const {\n      initialClientX,\n      initialClientY,\n      clientX,\n      clientY,\n    } = this.state;\n\n    return (\n      <div\n        onDragEnter={this.handleDragEnter}\n        onDragLeave={this.handleDragLeave}\n      >\n        <button\n          draggable\n          onDrag={this.handleDrag}\n          onDragStart={this.handleDragStart}\n          onDragEnd={this.handleDragEnd}\n          style={{\n            height: '100px',\n            width: '100px',\n            background: 'pink',\n            userSelect: 'none',\n            margin: '20px',\n          }}\n        >\n          Drag me\n          initialClientX: {initialClientX}\n          initialClientY: {initialClientY}\n          clientX: {clientX}\n          clientY: {clientY}\n        </button>\n      </div>\n    );\n  }\n}\n\nclass KeyBoard extends Component {\n  render() {\n    return (\n      <div>\n        <StrikeableDraggable />\n        <StrikeableDraggable />\n        <StrikeableHoldable />\n      </div>\n    );\n  }\n}\n\nexport default KeyBoard;\n","import './KeyBoard.css';\nimport KeyBoard from './KeyBoard.js';\n\nexport default KeyBoard;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Key from './Key';\nimport KeyBoard from './KeyBoard';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <div>\n            <KeyBoard />\n          </div>\n          <div>\n            <Key note=\"c\" />\n            <Key note=\"d\" />\n            <Key note=\"e\" />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}