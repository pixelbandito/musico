{"version":3,"sources":["logo.svg","Key/Key.js","Key/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","notes","c","d","e","Key","state","playing","context","AudioContext","handleClick","_this$state","_this","gainNode","gain","exponentialRampToValueAtTime","currentTime","setState","prevState","note","this","props","createGain","oscillator","createOscillator","type","frequency","value","start","setValueAtTime","connect","destination","react_default","a","createElement","onClick","Component","App","className","src","logo","alt","src_Key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mQCElCC,eAAQ,CACZC,EAAG,MACHC,EAAG,MACHC,EAAG,QCFUC,6MDMbC,MAAQ,CACNC,SAAS,EACTC,QAAS,IAAIC,gBAgBfC,YAAc,WAAM,IAAAC,EACWC,EAAKN,MAA1BE,EADUG,EACVH,QADUG,EACDJ,QAGfK,EAAKC,SAASC,KAAKC,6BAA6B,KAASP,EAAQQ,YAAc,IAE/EJ,EAAKC,SAASC,KAAKC,6BAA6B,EAAGP,EAAQQ,YAAc,IAE3EJ,EAAKK,SAAS,SAAAC,GAAS,MAAK,CAAEX,SAAUW,EAAUX,+FArBhC,IACVY,EAASC,KAAKC,MAAdF,KACAX,EAAYY,KAAKd,MAAjBE,QACRY,KAAKP,SAAWL,EAAQc,aACxBF,KAAKG,WAAaf,EAAQgB,mBAC1BJ,KAAKG,WAAWE,KAAO,OACvBL,KAAKG,WAAWG,UAAUC,MAAQ1B,EAAMkB,GACxCC,KAAKG,WAAWK,MAAM,GACtBR,KAAKP,SAASC,KAAKe,eAAe,KAAQrB,EAAQQ,aAClDI,KAAKG,WAAWO,QAAQV,KAAKP,UAC7BO,KAAKP,SAASiB,QAAQtB,EAAQuB,8CAe9B,OACEC,EAAAC,EAAAC,cAAA,UAAQC,QAASf,KAAKV,aAAtB,mBAhCY0B,aEgBHC,mLAhBX,OACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAChBN,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCT,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAACQ,EAAD,CAAKvB,KAAK,MACVa,EAAAC,EAAAC,cAACQ,EAAD,CAAKvB,KAAK,MACVa,EAAAC,EAAAC,cAACQ,EAAD,CAAKvB,KAAK,eAXFiB,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2031ffbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nconst notes = {\n  c: 261.6,\n  d: 293.7,\n  e: 329.6,\n}\n\nclass Key extends Component {\n  state = {\n    playing: false,\n    context: new AudioContext(),\n  }\n\n  componentDidMount() {\n    const { note } = this.props;\n    const { context } = this.state;\n    this.gainNode = context.createGain()\n    this.oscillator = context.createOscillator()\n    this.oscillator.type = 'sine';\n    this.oscillator.frequency.value = notes[note];\n    this.oscillator.start(0);\n    this.gainNode.gain.setValueAtTime(0.0001, context.currentTime);\n    this.oscillator.connect(this.gainNode);\n    this.gainNode.connect(context.destination);\n  }\n\n  handleClick = () => {\n    const { context, playing } = this.state;\n\n    if (playing) {\n      this.gainNode.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + 0.4);\n    } else {\n      this.gainNode.gain.exponentialRampToValueAtTime(1, context.currentTime + 0.1);\n    }\n    this.setState(prevState => ({ playing: !prevState.playing }))\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n\nexport default Key;\n","import './Key.css';\nimport Key from './Key.js';\n\nexport default Key;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Key from './Key';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <Key note=\"c\" />\n          <Key note=\"d\" />\n          <Key note=\"e\" />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}